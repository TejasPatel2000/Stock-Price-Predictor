# -*- coding: utf-8 -*-
"""Stock_Predictor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xuLoIq3R0ZV2HQzPVybM1EF1h_juLfXD
"""

# Use LSTM to predict closing stock price of a corporation using the last 60 days of the stock price

# Import libraries
import math
import pandas_datareader as web
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt

plt.style.use("fivethirtyeight")

# Get Stock Quote
df = web.DataReader("AAPL", data_source="yahoo", start="2012-01-01", end="2020-12-29")
# Show the data
df

# Get number of rows and columns in dataset
df.shape

# Visualize closing price data
plt.figure(figsize=(16,8))
plt.title("Closing Price History")
plt.plot(df['Close'])
plt.xlabel("Date", fontsize=16)
plt.ylabel("Close Price USD ($)", fontsize=16)
plt.show()

# Create new df with only closing price
data = df.filter(['Close'])
# Convert the dataframe to a numpy array
dataset = data.values
# Get the number of rows to train the model on 
training_data_len = math.ceil(len(dataset) * .8)

training_data_len

# Scale data due to the advantage of preprocessing data
scaler = MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(dataset)

scaled_data

# Create training dataset
# Create scaled training data set
train_data = scaled_data[0:training_data_len, :]
# Split data into x_train and y_train
x_train = []
y_train = []

for i in range(60, len(train_data)):
  #From 0 to 59
  x_train.append(train_data[i-60:i,0])
  # The 60th value
  y_train.append(train_data[i,0])
  if i<=61:
    print(x_train)
    print(y_train)
    print()

# Convert xtrain and ytrain to numpy arrays
x_train, y_train = np.array(x_train), np.array(y_train)

# reshape the xtrain dataset
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))
x_train.shape

# Build LSTM Model
model = Sequential()
# Adding Layers
model.add(LSTM(50, return_sequences=True, input_shape = (x_train.shape[1], 1)))
model.add(LSTM(50, return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))

# Compile model
model.compile(optimizer='adam', loss='mean_squared_error')

# Train model
model.fit(x_train, y_train, batch_size=1, epochs=1)

# Create testing data set
# Create new array containing scaled values from index 1751 to 2251
test_data = scaled_data[training_data_len - 60: ,:]
# Create data sets x_test and y_test
x_test = []
y_test = dataset[training_data_len:, :]
for i in range(60, len(test_data)):
  x_test.append(test_data[i-60:i, 0])

# Convert data into numpy array
x_test = np.array(x_test)

# Reshape data 
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))

# Get models predicted price values for x_test dataset
predictions = model.predict(x_test)
predictions = scaler.inverse_transform(predictions)

# Evaluate model by getting root mean squared error (RMSE)
rmse = np.sqrt(np.mean((( predictions - y_test)**2)))
rmse

# Plot data
train = data[:training_data_len]
valid = data[training_data_len:]
valid['Predictions'] = predictions
# Visualize data
plt.figure(figsize=(16,8))
plt.title('Model')
plt.xlabel('Date', fontsize=16)
plt.ylabel('Close Price USD ($)', fontsize=16)
plt.plot(train['Close'])
plt.plot(valid[['Close', 'Predictions']])
plt.legend(['Train', 'Val', 'Predictions'], loc='lower right')
plt.show()

# Show valid and predicted prices
valid

# Predict closing price for tomorrow
# Get the quote
apple_quote = web.DataReader('AAPL', data_source='yahoo', start='2012-01-01', end='2020-12-29')
# Create new dataframe
new_df = apple_quote.filter(['Close'])
# get the last 60 day closing price values and convert dataframe to an array
last_60_days = new_df[-60:].values
# Scale data to be bw 0 and 1
last_60_days_scaled = scaler.transform(last_60_days)
# Create empty list 
X_test = []
# Append past 60 daysa to xtest list
X_test.append(last_60_days_scaled)
# Convert X_test data set to numpy array
X_test = np.array(X_test)
# Reshape to be 3D
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))
# Get predicted scale price
pred_price = model.predict(X_test)
# undo scaling
pred_price = scaler.inverse_transform(pred_price)
print("Apple's Predicted Stock Price TMRW: " + str(pred_price))